//
//  CalibrationCalculations.swift
//  Capstone-ROM-App (iOS)
//
//  Created by Eric Cordts on 2/8/22.
//

import SwiftUI
import Accelerate
import Foundation

let rawData1 : [[Int16]] = [[1, -59, 35, 360, -426, 253], [2, -23, 26, 29, 242, -127], [0, -29, 12, -81, 22, -28], [-1, -16, 10, 61, -413, 110], [-1, -47, 31, -14, 69, -151], [-4, -63, 34, -167, -288, -11], [-4, -74, 45, -242, -440, -26], [-5, -63, 49, -53, -32, -6], [-7, -47, 29, -253, -311, -53], [-4, -34, 31, -625, -765, -103], [-8, -28, 46, -69, -112, -17], [-9, -12, 22, -178, -191, -3], [-9, -8, 21, -474, -446, 4], [-18, -6, 52, -109, 29, -51], [-7, 3, 10, -125, -584, 139], [-10, 5, 21, -123, -298, 26], [-11, 3, 44, -22, 160, -10], [-11, 0, 29, 61, -136, 54], [-2, -1, 7, 52, 64, 31], [-2, -7, 9, -29, -255, 34], [7, -24, 28, -20, 147, -17], [0, -8, 8, -109, 6, -25], [1, -72, 35, 228, -238, 130], [-3, -27, 25, -12, -119, 36], [-2, -39, 14, 18, -6, -20], [-4, -66, 21, 145, -473, -78], [-7, -91, 25, -40, -59, 18], [-6, -38, 3, 34, -80, -130], [-12, -73, 6, -15, -189, 27], [-3, -67, 4, -15, -54, -57], [1, -51, 8, -42, -64, -12], [-2, -22, -2, -31, 78, 40], [-8, -55, 7, 0, -73, -21], [-9, -49, 6, -47, -169, 32], [-4, -18, 1, -14, -446, 106], [-2, -40, 6, -74, -87, 39], [1, -74, 19, -53, -173, 56], [-2, -50, 4, -125, -721, 386], [-6, -57, 1, -217, -853, 525], [-11, -30, 2, -6, 195, -33], [-11, -70, 2, -135, -585, 319], [-7, -76, 11, -32, 11, -12], [-10, -24, 5, -24, -148, 131], [-4, -22, 0, -12, -504, 53], [-6, -77, 22, -39, -59, 20], [-8, -79, 5, -39, -71, 11], [-9, -44, 1, -31, -356, 6], [-9, -46, 0, -3, -342, -83], [-8, -61, 7, -62, -84, 28], [-4, -44, 12, 4, 367, -151], [-7, -41, 4, -45, -324, 58], [-6, -80, 18, -92, -473, 97], [-8, -48, -1, -34, -235, -68], [-9, -56, 2, -56, -215, 32], [-11, -61, 9, -53, -78, 13], [-4, -40, 2, -42, -861, 226], [-5, -6, 0, -24, -277, 57], [-9, -55, 14, -72, -335, 63], [-6, -17, 1, -15, -70, 15], [-8, -48, 6, -17, -95, 40], [-12, -35, 5, -69, -222, 63], [-17, -89, 21, -28, 51, -2], [-12, -48, 1, -79, -513, 374], [-27, -53, 3, -36, 54, -21], [-10, -57, 2, -62, -253, 96], [-5, -10, 0, -21, -457, 144], [-13, -32, 7, -42, -71, 6], [-5, -28, 10, -79, -307, 57], [-2, -26, 2, -61, -51, 33], [6, -59, 11, -56, -46, 33], [3, -30, 6, -163, -585, 352], [8, -75, 21, -216, -252, 244], [7, -88, 35, -42, 4, 15], [-4, -52, 7, -64, 25, 37], [0, -33, 4, -89, -435, 145], [-4, -19, 8, -83, -411, 64], [-7, -38, 22, -43, -81, 14], [-2, -28, 12, -64, -261, 115], [5, -55, 34, -34, 42, 36], [-4, -30, 13, -27, -244, 70], [-6, -32, 12, -21, -505, 144], [-2, -23, 8, -25, 114, -23], [-7, -30, 23, -39, -56, 4], [0, -42, 14, 57, -565, 161], [-4, -45, 14, 101, -704, 123], [5, -42, 11, -15, -429, 86], [3, -48, 5, 25, -212, -15], [-1, -61, 5, 92, -484, -28], [-2, -10, 5, -49, -431, 73], [-4, -67, 9, 43, -502, -89], [9, -32, 8, -20, 177, -103], [0, -97, 17, -18, -86, -12], [-4, -47, -3, 42, -562, -70], [-5, -41, -1, 25, -466, -41], [-3, -30, 1, -30, -480, 98], [-4, -27, -1, -18, -180, -21], [-5, -10, 0, -47, 14, 17], [-9, -26, 8, -54, -161, 9], [-7, -19, 0, -24, -323, 50], [-13, -51, 6, -30, -126, 6], [-12, -65, 11, -52, -313, 54], [-14, -45, 1, -47, -629, 198], [-16, -76, 8, -50, -92, 39], [-19, -70, 11, -53, -103, 36], [-25, -66, 18, -39, -371, 50], [-23, -48, 0, -53, 114, 48], [-11, -38, 1, 15, 203, -84], [-7, -20, 0, -58, -484, 242], [-19, -88, 10, -32, 65, 0], [-21, -93, 26, -26, 67, 12], [-2, -53, 3, -361, -401, 985], [0, -53, 15, -113, -106, 187], [0, -6, 0, 43, 223, -127], [13, -21, 11, -169, -404, 511], [21, -11, 4, -285, -266, 568], [6, 0, 3, -59, -380, 214], [18, 0, 4, -9, 78, -62], [9, 4, 6, -56, -68, 44], [37, 3, 16, -5, 210, -53], [25, 6, 6, -6, -424, 1], [34, 5, 8, -37, -167, 7], [20, 0, 2, 75, -120, -160], [35, -11, 8, 97, -585, -308], [9, -25, 13, 18, 53, -167], [25, -31, 15, -6, 53, -45], [-2, -11, 1, -70, 89, 202], [10, -91, 24, -25, 63, -96], [-3, -34, 4, 3, -92, -57], [-5, -30, 3, -17, -383, -16], [-9, -53, 18, -38, 98, -15], [-11, -60, 14, -14, 167, -23], [-19, -61, 17, -36, -142, 26], [-12, -48, 20, -175, -689, 325], [-23, -66, 31, -219, -729, 286], [-10, -16, 7, -56, -315, 67], [-20, -53, 27, -497, -606, 81], [-23, -75, 58, -153, -145, 14], [-21, -38, 35, -72, -177, 38], [-9, -12, 13, -295, 101, -104], [-16, -21, 27, -554, -264, -71], [-24, -26, 64, 38, -367, 112], [-18, -8, 36, -444, -317, -53], [-11, 2, 18, -377, -301, -35], [-10, 10, 22, -109, -13, -32], [-4, 5, 3, 5, 473, -137], [-6, 12, 46, -54, -119, 15], [-9, 12, 20, -70, -155, 28], [-8, 10, 17, 60, -89, 51], [-7, 8, 15, 211, -451, 159], [-9, -4, 54, -42, -127, 16], [-8, -12, 34, 101, -299, 77], [-6, -3, 7, 181, -908, 316], [-10, -18, 30, -83, -399, 89], [-5, -36, 27, 496, -552, 292], [0, -69, 59, -1, 198, -61], [7, -59, 45, -74, -322, 84], [5, -68, 50, -37, -156, 39], [-1, -48, 21, 101, -731, 347], [8, -57, 31, -10, 5, 0], [0, -17, 5, -28, -325, 84], [1, -64, 27, -134, -487, 115], [-1, -84, 41, -71, -236, 24], [-6, -8, 7, -93, -131, 19], [-4, -38, 17, -93, -228, 37], [-4, -3, 3, -81, -511, 136], [-6, -44, 36, -51, -182, 53], [-6, -13, 20, -26, 114, -29], [-6, -15, 7, -48, -147, -17], [-16, -25, 19, 25, 89, 6], [-6, -26, 9, 200, -419, 291], [-8, -59, 38, -78, -234, 29], [-8, -42, 14, 13, -338, 173], [0, -33, 11, -21, -362, 72], [-1, -14, 3, -46, -76, 42], [6, -30, 11, 0, -38, -6], [10, -40, 10, 37, -321, -130], [19, -59, 19, -39, -436, 71], [0, -29, 12, -64, -579, -172], [-5, -36, 10, -18, -253, -21], [-17, -27, 8, -31, -712, -137], [-28, -38, 14, 44, -81, -280], [-35, -58, 0, 103, -382, -389], [-41, -33, 9, -29, -51, -145], [-36, -33, 0, -56, -104, 17], [-32, -14, 0, -5, -641, 29], [-32, -13, 0, 3, -574, -496], [-60, -13, 0, -15, -574, -238], [-25, -1, 0, -52, -626, -12], [-67, -4, 3, -10, 169, -163], [-21, 2, -1, -45, -234, 22], [-63, -1, 4, -68, -360, 36], [-50, 0, 0, -47, -73, 20], [-54, 0, 7, -47, -164, 18], [-33, -3, 0, -59, -748, 391], [-33, -6, -1, -16, -131, -155], [-61, -29, 5, -76, -391, 421], [-29, -12, 0, -179, -265, 794], [-80, -69, 16, -74, -63, 176], [-66, -72, 12, -52, 51, 168], [-27, -38, -3, -289, -319, 1029], [-16, -32, 0, -46, -303, 200], [-7, -25, 19, -6, -223, -61], [-3, -38, 21, -80, -123, 220], [2, -36, 13, -93, -540, 416], [12, -25, 8, -43, -167, 26], [4, -10, 3, -104, -272, 285], [24, -33, 14, -81, -356, 293], [30, -23, 25, -35, -164, 64], [25, -18, 19, -39, -55, 10], [29, -22, 17, -19, -122, 0], [1, -1, 2, -21, -22, 58], [23, -18, 27, -35, -14, -3], [12, -22, 6, 97, -507, -327], [10, -36, 6, -9, 81, -50], [7, -72, 26, -23, -15, -1], [-13, -85, 17, 7, -14, -63], [-12, -35, -1, -65, -377, -513], [-34, -93, 20, -5, 25, -103], [-22, -29, 0, 61, -29, -228], [-20, -42, 3, -64, -80, -431], [-34, -22, 0, -58, -95, 25], [-80, -49, 14, -63, -216, -43], [-45, -13, 0, -9, -117, -86], [-39, -9, 3, 11, -610, -38], [-42, -19, 7, -40, -10, 4], [-48, -12, 2, -22, 14, -4], [-43, -12, 2, 1, -574, 196], [-68, -17, 12, -46, 61, -18], [-82, -17, 25, -20, 74, -3], [-46, -2, 10, -90, -415, 108], [-41, -3, 10, -108, -377, 128], [-60, 0, 28, -26, -155, 70], [-67, -13, 35, -22, -26, 6], [-61, -11, 20, -28, -78, 18], [-58, -11, 24, -53, -51, 10], [-59, -9, 46, -10, -57, 21], [-61, -17, 63, -89, 164, -87], [-41, -4, 63, -15, 109, -45], [-30, -1, 43, -142, -333, 31], [-17, 2, 29, -29, -290, 63], [-18, 6, 44, -32, 170, -49], [-9, 7, 46, -30, 150, -18], [-3, 10, 53, -42, -50, 0], [0, 9, 15, -76, -412, 115], [2, 10, 25, -90, -356, 101], [5, 11, 47, -37, -310, 65], [-1, 11, 29, -23, -53, 29], [0, 9, 29, -11, 227, -53], [-1, 13, 60, -40, -81, 21], [-9, 7, 24, 42, -499, 135], [-11, 3, 58, -19, -28, -121], [-22, 4, 60, -46, -82, 0], [-24, 8, 37, 10, -585, 180], [-38, -6, 74, -41, -199, 43], [-46, -1, 72, -12, 107, -14], [-15, 1, 14, 7, -610, 231], [-35, -4, 34, 31, -811, 335], [-31, 0, 41, -4, 158, -56], [-29, -4, 35, 12, -76, 67], [-18, 0, 5, -61, -420, 90], [-55, -8, 45, -51, -271, 63], [-20, -2, 7, -49, -634, 192], [-22, -2, 7, -136, -642, 250], [-56, -13, 45, -31, -14, 10], [-50, -26, 19, -5, 15, 59], [-26, -15, 8, -159, -450, 430], [-54, -53, 48, -117, -179, 131], [-13, -11, 9, -79, -99, 203], [-21, -21, 17, 86, -79, -164], [-32, -32, 44, -172, -78, 92], [-21, -26, 35, -175, -266, 139], [-20, -20, 32, -253, 187, 368], [-14, -10, 37, -31, 144, -32], [-24, -10, 40, -173, -118, 62], [-16, -5, 33, -128, -111, 22], [-22, -18, 68, -130, -276, 73], [-11, 0, 33, -34, -12, 7], [-15, 4, 29, -210, -59, 12], [-20, 7, 51, -46, 6, 8], [-12, -11, -11, 28, -78, -259], [-14, 13, 34, -47, -162, 7], [-10, 8, 9, -78, -570, 136], [-21, 19, 31, -22, -661, 177], [-18, 16, 29, -4, -143, 36], [-13, 12, 23, 197, -300, 33], [-14, 8, 57, 34, -52, 12], [-13, -2, 65, -51, -4, 19], [-14, 0, 37, 180, -520, 111], [-11, -15, 65, 0, -123, 4], [-10, -24, 73, -15, -184, 29], [-8, -11, 26, 258, -363, 82], [-11, -19, 32, -45, -223, 41], [-6, -26, 39, -60, -159, 63], [1, -31, 23, 426, -193, 159], [5, -34, 28, 316, -260, 192], [9, -60, 61, -14, -334, 107], [-8, -32, 28, -4, -556, 51], [-5, -6, 4, -15, 287, -87], [-14, -61, 39, -82, -312, 60], [-7, -21, 6, 64, -389, 56], [-14, -46, 18, 55, -349, 4], [-7, -49, 22, -28, 100, -24], [-3, -28, 4, -16, -250, 37], [-2, -56, 3, -54, -227, 130], [-5, -13, 2, -79, -241, 164], [-10, -68, 27, -76, -260, 59], [-7, -45, 9, 58, -225, -68], [-7, -39, 5, -2, -208, -84], [-8, -53, 21, -32, 84, -22], [-14, -36, 3, -55, -369, -5], [-7, -19, 0, -18, -317, 55], [-13, -33, 2, -45, -113, 41], [-14, -41, 8, -45, -377, 70], [-13, -38, 5, -43, -291, 69], [-6, -70, 23, -42, -26, -6], [-15, -57, 4, -9, 166, -23], [-14, -58, 5, -3, 18, 82], [-15, -82, 27, -29, -125, 23], [-4, -15, 1, -27, -438, 236], [-6, -23, 3, -92, -605, 283], [-1, -33, 22, -9, 191, -64], [-14, -56, 8, -59, -261, 101], [-10, -49, 10, -154, -635, 350], [-7, -69, 28, -71, -140, 40], [-9, -46, 9, -48, -346, 102], [-1, -38, 3, -57, -499, 203], [2, -74, 30, -33, -184, 86], [2, -41, 10, -30, -289, 49], [-1, -47, 13, -7, 80, 2], [9, -46, 20, -2, -89, -21], [-1, -33, 3, -15, -399, 9], [-7, -31, 6, 32, -426, -128], [-14, -62, 16, 2, -46, -106], [-25, -55, 18, -54, -160, 0], [-22, -34, 1, -54, -789, -145], [-28, -40, 4, -78, -664, -104], [-14, -9, 1, -12, -214, -66], [-54, -50, 15, -14, -363, -201], [-64, -47, 13, -150, -87, -53], [-26, -16, 15, -76, -36, 9], [-25, -13, 0, -43, -281, -99], [-49, -27, 9, -53, -43, -8], [-68, -46, 25, -48, -36, 4], [-37, -28, 6, -10, -76, -25], [-49, -39, 6, 6, -160, 138], [-60, -58, 20, -79, -303, 53], [-20, -6, 1, -23, -320, 429], [-31, -31, 4, -29, 153, -22], [-51, -80, 17, -68, -175, 116], [-21, -40, -3, -97, -352, 770], [-10, -24, 1, -85, -484, 446], [-7, -28, 12, -72, -119, 29], [-3, -43, 19, -13, -374, 57], [4, -29, 11, -32, -106, 10], [17, -46, 26, -113, -462, 119], [10, -20, 5, -71, -377, 361], [1, -9, 3, -15, -43, 9], [10, -14, 17, -10, 136, -81], [24, -14, 8, -14, -277, 230], [29, -25, 17, -99, -469, 260], [36, -19, 18, -42, -12, 28], [10, -2, 2, -14, -46, 23], [27, -28, 12, 1, 208, -65], [29, -37, 12, 9, -441, 25], [30, -29, 26, -54, -133, 49], [2, -4, 3, -50, -800, 218], [44, -36, 25, -25, -346, -14], [27, -13, 20, -46, -57, 15], [7, -25, 8, -29, -141, 109], [1, -27, 3, 15, -485, -158], [9, -76, 27, -51, -31, 36], [-5, -5, 3, -37, 7, 57], [-16, -38, 1, -22, -571, -624], [-23, -62, 1, -14, -733, -581], [-18, -18, 0, 7, 386, -111], [-29, -36, 0, -83, -489, -446], [-43, -28, 14, -43, -32, -48], [-54, -42, 16, -9, 110, -39], [-15, -2, 0, 18, 330, -7], [-12, -1, 0, -18, -466, 68], [-47, -22, 5, -12, 137, -44], [-33, -27, -1, -31, 104, -24], [-20, -6, 0, -11, -28, 3], [-33, -16, 5, 0, -7, 0], [-50, -25, 2, -32, -259, 67], [-18, -6, 0, -14, 34, -6], [-46, -20, 0, -26, -390, 107], [-48, -22, 0, -25, -82, 31], [-45, -17, -1, -29, -173, 40], [-32, -12, 3, -45, 5, 0], [-59, -28, 10, -27, -27, -7], [-34, -15, -2, -45, -329, 78], [-41, -19, -4, -47, -420, 106], [-58, -32, 7, -43, -675, 196], [-44, -16, -1, -47, -592, 9], [-14, -2, 0, -27, 180, -45], [-32, -11, 3, -30, -12, 8], [-43, -18, 0, -16, -32, 20], [-20, -6, 0, -61, -116, 33], [-45, -17, 4, -31, 109, -37]]

let rawData2 : [[Int16]] = [[20, -6, 85, -155, -859, -72], [7, -1, 86, -233, -702, -103], [0, -4, 85, -81, -556, -73], [-8, -3, 84, -165, -416, -68], [-14, -4, 79, -90, -198, -40], [-16, -1, 68, -319, 45, 70], [-11, -2, 68, -283, 406, 136], [10, -1, 70, -290, 979, 240], [19, 1, 77, -537, 1015, 289], [43, 5, 90, -389, 1081, 216], [72, 12, 82, -382, 1088, 249], [57, 0, 78, 148, 285, 48], [77, 7, 85, -159, 814, 136], [79, 6, 59, -89, 887, 140], [83, 10, 82, 337, 319, -112], [95, 9, 66, 64, 195, 36], [92, 4, 71, 441, 128, -112], [99, 4, 81, -118, -555, -79], [92, 2, 84, 92, -1098, -208], [85, 0, 80, 159, -1260, -252], [65, -5, 75, 78, -1365, -305], [50, -4, 74, 60, -1353, -304], [29, -3, 73, -275, -1421, -231], [10, -12, 72, 181, 178, -46], [0, -4, 80, -447, -607, -76], [-7, -11, 79, -161, -488, -118], [-13, -6, 78, -148, -292, -81], [-16, -7, 81, -208, -86, -28], [-14, -7, 67, -846, -469, 15], [-7, -7, 66, -202, 562, 122], [7, 0, 47, -387, 1079, 271], [34, -2, 69, -949, 916, 193], [54, 19, 82, -612, 1438, 194], [64, 11, 75, 497, 993, -39], [90, 10, 90, -563, 1203, 205], [116, 12, 91, -407, 783, -11], [107, 5, 66, 11, 382, -274], [104, -1, 66, -74, 67, -469], [103, -5, 54, -116, -333, -777], [101, -21, 36, 89, -240, -1015], [91, -31, 36, -435, -212, -1019], [81, -21, 42, -344, -55, -1271], [76, -22, 47, -483, -214, -975], [67, -22, 51, -688, -280, -527], [60, -24, 51, -471, -190, -394], [59, -23, 56, -356, -81, -239], [49, -23, 57, -219, -78, 31], [57, -23, 56, -9, 0, 324], [64, -14, 50, -2, -18, 615], [68, -22, 57, 202, -17, 783], [84, -29, 49, 92, -67, 807], [82, -19, 46, 78, -84, 914], [82, -31, 46, 97, -39, 892], [89, -22, 49, -327, -11, 115], [93, -24, 43, -249, -31, 529], [93, -17, 48, -38, 33, 381], [93, -17, 47, -73, -16, 292], [88, -24, 50, -435, -153, -104], [99, -19, 48, -692, -296, -132], [104, -27, 45, -235, -42, -455], [92, -24, 43, -376, -70, -703], [90, -18, 43, -358, -87, -869], [81, -24, 48, -499, -172, -906], [77, -25, 54, -550, -239, -638], [68, -34, 55, -410, -391, -578], [60, -34, 48, -532, -337, -358], [56, -26, 56, -517, -236, -195], [56, -27, 57, -366, -155, -42], [52, -28, 60, -125, -15, 46], [60, -30, 59, -771, -202, 260], [61, -18, 54, 250, 199, 439], [67, -26, 60, 83, 61, 705], [84, -37, 50, -279, -192, 51], [89, -33, 45, -482, -103, 581], [61, -30, 48, -59, 123, 505], [108, -30, 39, 167, 218, 546], [94, -30, 40, 154, 208, 360], [83, -25, 49, -238, -53, 289], [96, -1, 43, 126, -47, 537], [91, -1, 42, -438, -18, 285], [98, 14, 46, 460, 7, 1002], [96, 21, 48, -87, -296, 1161], [97, 28, 52, -785, -543, 933], [85, 34, 54, -195, -382, 1047], [73, 33, 53, -118, -347, 979], [61, 46, 51, 167, 274, 48], [55, 39, 53, -192, -311, 753], [50, 40, 57, -227, -193, 474], [44, 43, 52, -159, -220, 302], [44, 42, 57, -1210, -635, 268], [45, 42, 56, 9, 28, -136], [46, 42, 53, -310, 42, -290], [49, 34, 50, -1274, -646, 68], [67, 39, 46, -369, 222, -1082], [74, 37, 56, -540, 122, -1049], [89, 51, 54, -439, 23, -971], [95, 26, 43, -309, 38, -920], [93, 21, 45, -292, -65, -1007], [100, 17, 44, -267, -104, -961], [93, -1, 45, -367, -151, -906], [91, -1, 44, -361, -179, -159], [98, -14, 45, -446, -108, -793], [91, -15, 50, -326, -208, -750], [90, -24, 50, -328, -249, -694], [75, -23, 49, -390, -252, 62], [72, -23, 52, -433, -205, -432], [60, -23, 49, -447, -380, -408], [58, -24, 52, -312, -249, -252], [59, -24, 54, -175, -36, 78], [60, -25, 52, -73, 144, 349], [71, -26, 55, -120, 93, 356], [88, -29, 52, -151, -103, -87], [64, -15, 49, -537, -115, 674], [99, -27, 48, 370, 263, 910], [107, -9, 41, 14, 178, 783], [86, -19, 46, -248, -144, 585], [97, 6, 30, 535, 99, 792], [98, -4, 38, 225, -167, 849], [99, 2, 42, -95, -289, 639], [95, 6, 54, -133, -267, 513], [85, 13, 48, -1119, -820, 375], [80, 15, 54, -308, -527, 399], [75, 30, 53, -412, -526, 321], [69, 25, 53, -324, -336, 171], [63, 28, 58, -382, -374, 87], [61, 35, 59, -463, -380, 29], [55, 39, 60, -596, -331, 51], [57, 44, 62, -219, -57, -21], [56, 45, 60, -142, -32, -51], [58, 42, 59, -771, -223, 46], [61, 40, 57, -45, 190, 35], [66, 41, 56, -97, 162, 51], [64, 35, 51, 70, 101, 54], [67, 40, 49, -628, 62, 34], [75, 36, 48, -203, 338, 21], [75, 34, 45, -40, 354, 19], [76, 30, 48, -213, 213, -31], [83, 33, 40, -62, 163, -46], [88, 30, 44, -871, -358, -35], [80, 28, 35, 886, 645, -287], [87, 30, 37, -14, -14, -47], [90, 34, 42, -216, -164, -4], [96, 25, 63, -156, -419, 46], [91, 36, 66, 230, -894, 1], [90, 24, 67, 288, -982, -102], [70, 18, 80, -959, -1126, 115], [64, 16, 78, 644, -1289, -348], [46, -4, 79, 242, -1116, -301], [32, -4, 77, -518, -1035, -255], [14, -1, 81, -1033, -951, 89], [7, -1, 88, -652, -690, -84], [-4, 0, 88, -81, -722, -202], [-11, -4, 83, -303, -514, -96], [-18, -3, 72, -674, -545, 86], [-23, -2, 77, -628, -208, 40], [-23, -1, 74, -156, 107, 23], [-15, -4, 78, -337, -272, -82], [-8, 2, 75, -256, 562, 162], [6, 0, 77, -300, 838, 163], [31, -1, 86, -811, 585, 157], [50, 13, 82, -958, 722, 122], [45, 8, 84, -359, 1138, 139], [67, 21, 89, -398, 1021, 159], [86, 20, 77, -526, 940, 213], [81, 26, 68, -394, 670, 50], [87, 40, 66, -557, 501, 237], [89, 33, 63, 79, 438, 411], [98, 45, 57, 236, 176, 510], [87, 43, 54, 223, -98, 621], [83, 44, 54, -33, -255, 799], [73, 36, 51, 18, -296, 754], [62, 37, 54, 65, -296, 581], [59, 44, 54, -323, -434, 465], [54, 50, 60, 85, -294, 529], [47, 42, 59, -822, -568, 375], [40, 46, 62, -89, -178, 352], [40, 44, 65, -66, -73, 128], [39, 40, 61, -264, -89, -53], [43, 28, 57, -352, 70, -504], [52, 39, 61, -784, -138, -536], [68, 53, 55, -202, 130, -762], [71, 43, 59, -385, 70, -868], [71, 42, 54, -714, -415, -820], [83, 37, 61, -241, 6, -897], [82, 41, 54, -216, 31, -657], [77, 26, 49, -174, 13, -541], [76, 15, 52, -108, 5, 72], [83, 14, 50, -308, 100, -258], [85, 10, 48, -525, 164, -369], [84, 8, 41, 805, 635, -407], [83, 1, 31, -246, 187, -232], [93, 3, 33, -600, 55, -237], [92, 6, 35, -714, 1, -87], [93, -1, 31, -291, 205, -15], [87, -1, 27, -1525, -873, 224], [97, -4, 31, -308, 9, -131], [94, -2, 28, -452, -122, -22], [91, -1, 24, -606, -285, 14], [92, -2, 25, -150, -93, 34], [92, 0, 25, -54, -51, 125], [94, -5, 28, -64, -110, 187], [95, -4, 29, -704, -432, 192], [92, 4, 29, -311, -275, 192], [94, 5, 32, 36, -182, 205], [90, 5, 33, 39, -187, 217], [90, 8, 36, -787, -443, 217], [90, 2, 41, -524, -264, 186], [90, 11, 36, -182, -172, 144], [81, 7, 49, -321, -205, 43], [83, 14, 47, -234, -299, 68], [80, 14, 49, -300, -275, 25], [81, 17, 50, -1252, -774, 61], [77, 17, 52, -291, -163, -6], [75, 21, 53, -508, -183, 56], [71, 17, 54, 126, 97, -153], [77, 21, 52, -220, -39, -10], [78, 21, 50, -106, 98, -29], [78, 20, 50, -462, -142, -172], [82, 23, 43, -161, 214, 28], [83, 24, 44, 67, 181, 109], [81, 15, 38, -21, 189, 98], [83, 11, 38, 329, 283, -175], [87, 16, 37, -239, -47, -46], [90, 10, 41, -166, 66, -62], [83, 22, 36, -875, -469, 179], [87, 16, 34, 103, 76, 32], [89, 6, 34, -161, -91, -1], [93, 4, 32, -844, -250, 86], [96, 0, 36, -257, 197, -81], [93, 16, 26, -236, -58, -111], [94, 9, 26, -432, -143, 30], [95, 14, 31, -350, -139, 56], [97, 6, 33, -173, -109, 31], [94, 9, 33, -125, -123, 43], [93, 3, 36, -73, -162, 16], [107, 2, 56, -215, -543, -52], [102, -3, 58, -546, -814, -67], [92, 12, 52, -281, -930, -76], [89, 15, 63, -411, -1246, 18], [77, 8, 68, -266, -1084, -12], [65, 13, 68, -512, -922, 17], [48, 19, 84, -707, -833, 106], [40, 13, 84, 17, -1051, 2], [25, 12, 85, 205, -991, -81], [10, 0, 91, -170, -944, -14], [1, 0, 83, -536, -167, 134], [-4, 3, 85, -84, -538, 39], [-10, 1, 89, -1274, -943, 344], [-20, 6, 85, -183, -466, 88], [-22, 1, 85, -155, -305, 54], [-26, -2, 79, 47, 75, -86], [-25, 2, 82, -213, -21, 18], [-22, 0, 81, -209, 143, 32], [-17, 3, 80, -189, 367, 20], [-13, 0, 86, -781, 119, 41], [0, 3, 91, -168, 596, -18], [11, 6, 92, -330, 678, 29], [24, 4, 92, -253, 635, 67], [27, 7, 93, -76, 652, 3], [40, 3, 90, -549, 250, 36], [46, 3, 82, -1403, -537, 296], [52, 3, 83, -86, 622, 50], [61, 0, 74, 184, 382, 84], [66, -1, 75, -162, 540, 94], [72, -3, 70, -120, 128, 64], [77, -2, 68, -101, 437, 49], [86, -6, 68, -362, 121, 32], [81, -7, 63, -751, -516, 189], [88, -13, 63, -111, 48, -43], [87, -3, 63, -90, -172, -174], [82, -4, 61, -409, -390, -31], [74, -4, 48, -379, -108, -18], [75, 5, 68, -644, -509, 171], [75, 6, 69, -51, 200, -15], [72, -2, 72, -30, -536, 397], [71, -2, 76, -65, -596, 381], [67, 0, 90, -556, -620, 172], [59, 0, 89, -559, -846, 192], [48, -9, 85, -71, -1008, 230], [41, -5, 83, -42, -872, 125], [20, -2, 87, -230, -762, 77], [14, 0, 91, -240, -812, 59], [3, -4, 89, -3, -503, 9], [-1, -6, 79, 29, -435, -48], [-9, -4, 84, -76, -295, -53], [-12, -6, 84, -164, -63, -26], [-12, -1, 78, -129, 79, -7], [-8, -4, 78, -282, 225, -27], [-1, -3, 78, -458, 300, 44], [14, 0, 88, -373, 683, -13], [20, 7, 94, -433, 686, 3], [29, 9, 98, -469, 610, 23], [40, 13, 93, -614, 328, 42], [50, 13, 83, -355, 623, -9], [46, 13, 74, -324, 651, -4], [59, 15, 65, -256, 118, 147], [87, 19, 53, -1054, 651, 0], [90, 37, 71, -627, 665, -4], [86, 34, 67, 446, 505, 9], [90, 18, 50, -52, 21, 115], [89, 14, 37, -1, -14, 59], [90, 7, 34, -245, 14, -111], [95, 5, 40, -733, -230, -294], [100, 8, 40, -307, -249, -651], [102, 7, 44, -222, -239, -791], [96, 2, 42, -264, -314, -824], [96, -11, 39, -728, -394, -550], [88, -13, 36, -439, -184, -752], [82, -17, 39, -356, -80, -703], [75, -14, 55, -609, -476, -80], [76, -17, 50, -846, -347, -242], [75, -29, 48, -1063, -452, -127], [64, -30, 51, -435, -264, -31], [69, -25, 56, -337, -206, -120], [64, -20, 53, -82, -115, -41], [66, -20, 49, -482, -155, 149], [67, -17, 47, 53, 51, 338], [66, -20, 43, 1302, 833, -422], [87, -29, 41, 185, 264, 777], [95, -21, 48, -115, 88, 534], [91, -18, 44, -161, -159, 518], [104, -9, 36, 931, 571, -10], [97, -9, 35, -155, -158, 0], [87, -7, 36, -51, -134, 413], [91, 1, 35, -64, -83, 341], [83, -1, 40, -8, 51, 122], [87, 4, 40, -386, -46, 187], [88, 12, 41, -81, 89, 108], [90, 17, 40, -5, 53, 190], [89, 19, 38, 50, 26, 267], [88, 17, 39, -387, -143, 275], [85, 19, 35, 50, -109, 89], [84, 14, 39, -135, -59, 237], [81, 15, 35, 385, 236, -68], [85, 21, 38, -239, -83, 124], [86, 23, 36, -144, -111, 56], [86, 20, 36, 88, 81, 68], [86, 17, 36, 96, 110, 45], [88, 13, 32, 241, 127, -30], [90, 12, 37, -84, 188, -65], [91, 21, 33, -106, 19, -92], [92, 9, 27, -139, 48, -84], [91, 21, 34, -732, -225, -31], [88, 20, 31, 19, 0, -18], [92, 17, 33, -477, -222, 101], [90, 17, 33, -193, -230, 78], [88, 17, 37, -280, -315, 48], [87, 18, 36, -177, -190, -23], [80, 18, 42, -112, -87, 23], [86, 20, 39, -184, -178, 15], [85, 21, 43, -388, -249, 48], [79, 15, 43, -233, -179, 334], [83, 18, 40, -186, -266, -68], [84, 18, 48, -399, -151, 6], [81, 22, 45, -274, -301, -59], [79, 20, 45, -240, -232, -93], [81, 19, 49, -204, -199, -101], [79, 20, 52, 70, -54, -179], [77, 20, 54, -894, -449, -8], [77, 19, 55, -501, -236, -31], [77, 22, 52, -177, -37, -14], [77, 22, 54, -153, -1, -34], [80, 17, 53, -443, -123, 13], [79, 17, 52, -555, -223, -14], [79, 20, 51, -233, 4, -45], [79, 18, 53, -152, -43, -36], [80, 16, 51, -133, 18, -12], [73, 16, 48, -504, -71, -39], [75, 12, 41, -1138, -511, 254], [88, 17, 43, -200, 109, 61], [76, 11, 35, -264, 285, 150], [82, 17, 41, -53, -22, 48], [86, 12, 32, 28, 130, 43], [90, 8, 31, 14, 111, 281], [86, 13, 37, -142, -32, -29], [94, 1, 39, -116, 82, -92], [87, 3, 29, -561, -331, 34], [99, -7, 32, 66, -14, -26], [99, 0, 34, -432, -115, -185], [90, -4, 28, 505, 163, 162], [92, 2, 32, -435, -202, -308], [89, 0, 32, -462, -183, -194], [82, -5, 34, -218, -91, -148], [86, -6, 36, -219, -87, -53], [90, -7, 33, -112, -29, -19], [90, -7, 33, -125, -37, 4], [90, -8, 34, -134, -39, 17], [86, -10, 36, -152, 34, 78], [90, -10, 37, -169, -86, 41], [90, -8, 34, -240, -89, 31], [91, -7, 34, -252, -158, 73], [89, -11, 34, -859, -375, 38], [91, -9, 33, -726, -289, 48], [91, -8, 33, -126, -47, -1], [90, -8, 33, -244, -77, 20], [89, -9, 34, -934, -384, 45], [89, -9, 33, -530, -178, 34], [91, -9, 33, -97, -28, 2], [86, -9, 33, -303, -191, 54], [91, -4, 34, -277, -7, 120]]

// returns a polar unit vector when given Double([zenith angle, azimuthal angle]) in radians
// [sin(theta)cos(phi), sin(theta)sin(phi), cos(theta)]
func puVec(_ pArgs: [Float]) -> [Float] {
    return [sin(pArgs[0])*cos(pArgs[1]), sin(pArgs[0])*sin(pArgs[1]), cos(pArgs[0])]
}
// returns 2 puVec
func puVecs(_ pArgs: [[Float]]) -> [[Float]] { return [puVec(pArgs[0]), puVec(pArgs[1])] }

// derivative of polar unit vector with respect to zenith angle
// [cos(theta)cos(phi), cos(theta)sin(phi), -sin(theta)]
func puVecDzen(_ pArgs: [Float]) -> [Float] {
    return [cos(pArgs[0])*cos(pArgs[1]), cos(pArgs[0])*sin(pArgs[1]), -sin(pArgs[0])]
}
// returns 2 puVecDzen
func puVecsDzen(_ pArgs: [[Float]]) -> [[Float]] { return [puVecDzen(pArgs[0]), puVecDzen(pArgs[1])] }

// derivative of polar unit vector with respect to azimuthal angle
// [-sin(theta)sin(phi), sin(theta)cos(phi), 0]
func puVecDazi(_ pArgs: [Float]) -> [Float] {
    return [-sin(pArgs[0])*sin(pArgs[1]), sin(pArgs[0])*cos(pArgs[1]), 0]
}
// returns 2 puVecDazi
func puVecsDazi(_ pArgs: [[Float]]) -> [[Float]] { return [puVecDazi(pArgs[0]), puVecDazi(pArgs[1])] }



func mod(_ x: Float, _ m: Float) -> Float {
    let r = fmod(x, m)
    return r >= 0 ? r : r+m
}

func modpAngs(_ x: [[Float]]) -> [[Float]] {
    var xm = x
    for i in 0..<xm.count {
        xm[i][0] = mod(xm[i][0],Float.pi)
        xm[i][1] = mod(xm[i][1],2*Float.pi)
    }
    return xm
}

extension Array {
    func chunked(_ size: Int) -> [[Element]] {
        return stride(from: 0, to: count, by: size).map {
    Array(self[$0..<Swift.min($0+size, count)])
        }
}
}
 
// returns the inverse of an nxn matrix
func inv(_ mat: [[Float]]) -> [[Float]] {
    var matinv = mat.flatMap() {$0.map(){Double($0)}}
    var N = __CLPK_integer(sqrt(Double(matinv.count)))
    let n = Int(N)
    var pivots = [__CLPK_integer](repeating: 0, count: n)
    var workspace = [Double](repeating: 0.0, count: n)
    var error : __CLPK_integer = 0
    
    withUnsafeMutablePointer(to: &N) {
        dgetrf_($0, $0, &matinv, $0, &pivots, &error)
        dgetri_($0, &matinv, $0, &pivots, &workspace, $0, &error)
    }
    return matinv.map { Float($0) }.chunked(n)
}

// returns the left Moore-Penrose pseudoinverse of an mxn matrix
public func pinv(_ A: [[Float]]) -> [[Float]] {
    let _A = transpose(A.map(){$0.map(){Double($0)}})
    var _Af = _A.flatMap(){$0}
    let job : UnsafeMutablePointer<Int8> = UnsafeMutablePointer(mutating: ("A" as NSString).utf8String!)
    var _m : __CLPK_integer = __CLPK_integer(A.count)
    var _n : __CLPK_integer = __CLPK_integer(_A.count)
    var lda : __CLPK_integer = _m
    var ldu : __CLPK_integer = _m
    var ldvt : __CLPK_integer = _n
    let m = Int(_m)
    let n = Int(_n)
    
    var s : [Double] = [Double](repeating: 0.0, count: n)
    var u : [Double] = [Double](repeating: 0.0, count: Int(ldu*_m))
    var vt : [Double] = [Double](repeating: 0.0, count: Int(ldvt*_n))
    var wkopt : __CLPK_doublereal = 0
    var lwork : __CLPK_integer = -1
    var info : __CLPK_integer = 0
    var iwork : [__CLPK_integer] = [__CLPK_integer](repeating: 0, count: 8*min(n,m))
    dgesdd_(job, &_m, &_n, &_Af, &lda, &s, &u, &ldu, &vt, &ldvt, &wkopt, &lwork, &iwork, &info)
    lwork = __CLPK_integer(wkopt)
    var work = [Double](repeating: 0.0, count: Int(lwork))
    dgesdd_(job, &_m, &_n, &_Af, &lda, &s, &u, &ldu, &vt, &ldvt, &work, &lwork, &iwork, &info)
    
    /* Check for convergence */
    //if( info > 0 ) {} // the algorithm computing SVD failed to converge
    //if( info < 0 ) {} // wrong parameters provided
    
    if (m>n) {
        var VT : [[Double]] = transpose(vt.chunked(n))
        for i in 0..<n { VT[i] = s[i] == 0 ? svmult(VT[i],0) : svmult(VT[i],1/s[i]) }
        return mmult(transpose(VT),[[Double]](u.chunked(m)[0..<n])).map(){$0.map(){Float($0)}}
    }
    else if (n>m) {
        var UT : [[Double]] = u.chunked(m)
        for i in 0..<m { UT[i] = s[i] == 0 ? svmult(UT[i],0) : svmult(UT[i],1/s[i]) }
        return mmult(transpose([[Double]](transpose(vt.chunked(n))[0..<m])),UT).map(){$0.map(){Float($0)}}
    }
    else {
        var UT : [[Double]] = u.chunked(m)
        for i in 0..<m { UT[i] = s[i] == 0 ? svmult(UT[i],0) : svmult(UT[i],1/s[i]) }
        return mmult(vt.chunked(n),UT).map(){$0.map(){Float($0)}}
    }
}


// returns the transpose of a rectangular matrix
func transpose<T>(_ mat: [[T]]) -> [[T]] {
    guard let firstRow = mat.first else { return [] }
    return firstRow.indices.map { index in mat.map{ $0[index] } }
}

func mmult<T: Numeric>(_ mat1: [[T]], _ mat2: [[T]]) -> [[T]] {
    assert(mat1[0].count == mat2.count)
    let mat2t = transpose(mat2)
    let m = mat1.count
    let n = mat2t.count
    var mat1i = [T]()
    var result : [[T]] = [[T]](repeating: [T](repeating: 0, count: n), count: m)
    for i in 0..<m {
    mat1i = mat1[i]
    for j in 0..<n {
        result[i][j] = zip(mat1i,mat2t[j]).map(*).reduce(0,+)
}
}
    return result
}

func mmult<T: Numeric>(_ mat1: [[T]], _ mat2: [T]) -> [T] {
    let m = mat1.count
    var result = [T](repeating: 0, count: m)
    for i in 0..<m { result[i] = zip(mat1[i],mat2).map(*).reduce(0,+) }
    return result
}

func svmult<T: Numeric>(_ v: [T], _ s: T) -> [T] { return v.map(){ $0*s } }
func smmult<T: Numeric>(_ mat: [[T]], _ s: T) -> [[T]] { return mat.map(){ $0.map(){ $0*s } } }
func madd<T: Numeric>(_ mat1: [[T]], _ mat2: [[T]]) -> [[T]] { return zip(mat1,mat2).map {zip($0,$1).map(+)} }
func msub<T: Numeric>(_ mat1: [[T]], _ mat2: [[T]]) -> [[T]] { return zip(mat1,mat2).map {zip($0,$1).map(-)} }
func vadd<T: Numeric>(_ v1: [T], _ v2: [T]) -> [T] { return zip(v1,v2).map(+) }
func vsub<T: Numeric>(_ v1: [T], _ v2: [T]) -> [T] { return zip(v1,v2).map(-) }
func vdot<T: Numeric>(_ v1: [T], _ v2: [T]) -> T { return zip(v1,v2).map(*).reduce(0,+) }

func vcross<T: Numeric>(_ a: [T], _ b: [T]) -> [T] {
    return [a[1]*b[2]-a[2]*b[1], a[2]*b[0]-a[0]*b[2], a[0]*b[1]-a[1]*b[0]]
}

func trace<T: Numeric>(_ mat: [[T]]) -> T {
    var retVal : T = 0
    for i in 0..<mat[0].count { retVal += mat[i][i] }
    return retVal
}

func norm<T: FloatingPoint>(_ v: [T]) -> T { return sqrt(zip(v,v).map(*).reduce(0,+)) }
func normv<T: FloatingPoint>(_ v: [T]) -> [T] { return svmult(v,1/norm(v)) }
func matSqSumSq<T: FloatingPoint>(_ mat: [[T]]) -> T { return norm(mat.flatMap(){$0}) }

func matMTMInvErr(_ mat: [[Float]]) -> Float {
    let mtm = mmult(transpose(mat),mat)
    let n = mat[0].count
    var idn = [[Float]](repeating: [Float](repeating: 0, count: n), count: n)
    for i in 0..<n { idn[i][i] = 1 }
    let zerx = msub(mmult(inv(mtm),mtm),idn)
    return matSqSumSq(zerx)
}


struct CalibrationTest : View {
    var body : some View {
        
        ZStack{
            // create a background with a linear gradient
            LinearGradient(gradient: Gradient(colors: [CustomColors.BackgroundColorBlue, CustomColors.BackgroundColorGreen]), startPoint: .topLeading, endPoint: .bottomTrailing).ignoresSafeArea()
            
            VStack{
                Text("Summary filler text")
                Spacer()
                Button(
                    "Return to home", action: {
                        /*
                        //let imu1 = imuClass()
                        //let imu2 = imuClass()
                        let angle12 = angleClass()

                        angle12.imus = [imu1,imu2]

                        //let x : Float = (1...2).map{_ in .random(in: 0...10)}[0]
                        //print(x/5, acos(x/5))

                        angle12.prepCalibration()
                        for i in 149..<200 {
                            imu1.customAppend(rawData1[i])
                            imu2.customAppend(rawData2[i])
                        }

                        angle12.calibrate()

                        for i in 0..<100 {
                            imu1.customAppend(rawData1[i])
                            imu2.customAppend(rawData2[i])
                            angle12.updateAngle()
                        }
                         
                        //print(rawData1[27...30])
                        //print(rawData2[27...30])

                        angle12.prepDriftCalibration()

                        //26..<30
                        for i in 0..<100 {
                            imu1.customAppend(rawData1[i])
                            imu2.customAppend(rawData2[i])
                        }
                        //angle12.calAngList()
                        //print(angle12.angList)

                         
                         
                        angle12.calibrateDrift()
                        print(angle12.drift)

                        print(angle12.angList)
                        */
                    }
                ).buttonStyle(RoundedRectangleButtonStyle())
            }
        }
    }
}
/*
struct CalibrationTest_Previews: PreviewProvider {
    static var previews: some View {
        CalibrationTest()
    }
}
*/
